!function(e,n){"object"==typeof exports&&"object"==typeof module?module.exports=n():"function"==typeof define&&define.amd?define([],n):"object"==typeof exports?exports.client=n():e.client=n()}(this,(function(){return(()=>{var __webpack_modules__={"./node_modules/axios/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('module.exports = __webpack_require__(/*! ./lib/axios */ "./node_modules/axios/lib/axios.js");\n\n//# sourceURL=webpack://client/./node_modules/axios/index.js?')},"./node_modules/axios/lib/adapters/xhr.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"./node_modules/axios/lib/utils.js\");\nvar settle = __webpack_require__(/*! ./../core/settle */ \"./node_modules/axios/lib/core/settle.js\");\nvar cookies = __webpack_require__(/*! ./../helpers/cookies */ \"./node_modules/axios/lib/helpers/cookies.js\");\nvar buildURL = __webpack_require__(/*! ./../helpers/buildURL */ \"./node_modules/axios/lib/helpers/buildURL.js\");\nvar buildFullPath = __webpack_require__(/*! ../core/buildFullPath */ \"./node_modules/axios/lib/core/buildFullPath.js\");\nvar parseHeaders = __webpack_require__(/*! ./../helpers/parseHeaders */ \"./node_modules/axios/lib/helpers/parseHeaders.js\");\nvar isURLSameOrigin = __webpack_require__(/*! ./../helpers/isURLSameOrigin */ \"./node_modules/axios/lib/helpers/isURLSameOrigin.js\");\nvar createError = __webpack_require__(/*! ../core/createError */ \"./node_modules/axios/lib/core/createError.js\");\nvar defaults = __webpack_require__(/*! ../defaults */ \"./node_modules/axios/lib/defaults.js\");\nvar Cancel = __webpack_require__(/*! ../cancel/Cancel */ \"./node_modules/axios/lib/cancel/Cancel.js\");\n\nmodule.exports = function xhrAdapter(config) {\n  return new Promise(function dispatchXhrRequest(resolve, reject) {\n    var requestData = config.data;\n    var requestHeaders = config.headers;\n    var responseType = config.responseType;\n    var onCanceled;\n    function done() {\n      if (config.cancelToken) {\n        config.cancelToken.unsubscribe(onCanceled);\n      }\n\n      if (config.signal) {\n        config.signal.removeEventListener('abort', onCanceled);\n      }\n    }\n\n    if (utils.isFormData(requestData)) {\n      delete requestHeaders['Content-Type']; // Let the browser set it\n    }\n\n    var request = new XMLHttpRequest();\n\n    // HTTP basic authentication\n    if (config.auth) {\n      var username = config.auth.username || '';\n      var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';\n      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);\n    }\n\n    var fullPath = buildFullPath(config.baseURL, config.url);\n    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);\n\n    // Set the request timeout in MS\n    request.timeout = config.timeout;\n\n    function onloadend() {\n      if (!request) {\n        return;\n      }\n      // Prepare the response\n      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;\n      var responseData = !responseType || responseType === 'text' ||  responseType === 'json' ?\n        request.responseText : request.response;\n      var response = {\n        data: responseData,\n        status: request.status,\n        statusText: request.statusText,\n        headers: responseHeaders,\n        config: config,\n        request: request\n      };\n\n      settle(function _resolve(value) {\n        resolve(value);\n        done();\n      }, function _reject(err) {\n        reject(err);\n        done();\n      }, response);\n\n      // Clean up request\n      request = null;\n    }\n\n    if ('onloadend' in request) {\n      // Use onloadend if available\n      request.onloadend = onloadend;\n    } else {\n      // Listen for ready state to emulate onloadend\n      request.onreadystatechange = function handleLoad() {\n        if (!request || request.readyState !== 4) {\n          return;\n        }\n\n        // The request errored out and we didn't get a response, this will be\n        // handled by onerror instead\n        // With one exception: request that using file: protocol, most browsers\n        // will return status as 0 even though it's a successful request\n        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {\n          return;\n        }\n        // readystate handler is calling before onerror or ontimeout handlers,\n        // so we should call onloadend on the next 'tick'\n        setTimeout(onloadend);\n      };\n    }\n\n    // Handle browser request cancellation (as opposed to a manual cancellation)\n    request.onabort = function handleAbort() {\n      if (!request) {\n        return;\n      }\n\n      reject(createError('Request aborted', config, 'ECONNABORTED', request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle low level network errors\n    request.onerror = function handleError() {\n      // Real errors are hidden from us by the browser\n      // onerror should only fire if it's a network error\n      reject(createError('Network Error', config, null, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle timeout\n    request.ontimeout = function handleTimeout() {\n      var timeoutErrorMessage = 'timeout of ' + config.timeout + 'ms exceeded';\n      var transitional = config.transitional || defaults.transitional;\n      if (config.timeoutErrorMessage) {\n        timeoutErrorMessage = config.timeoutErrorMessage;\n      }\n      reject(createError(\n        timeoutErrorMessage,\n        config,\n        transitional.clarifyTimeoutError ? 'ETIMEDOUT' : 'ECONNABORTED',\n        request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Add xsrf header\n    // This is only done if running in a standard browser environment.\n    // Specifically not if we're in a web worker, or react-native.\n    if (utils.isStandardBrowserEnv()) {\n      // Add xsrf header\n      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?\n        cookies.read(config.xsrfCookieName) :\n        undefined;\n\n      if (xsrfValue) {\n        requestHeaders[config.xsrfHeaderName] = xsrfValue;\n      }\n    }\n\n    // Add headers to the request\n    if ('setRequestHeader' in request) {\n      utils.forEach(requestHeaders, function setRequestHeader(val, key) {\n        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {\n          // Remove Content-Type if data is undefined\n          delete requestHeaders[key];\n        } else {\n          // Otherwise add header to the request\n          request.setRequestHeader(key, val);\n        }\n      });\n    }\n\n    // Add withCredentials to request if needed\n    if (!utils.isUndefined(config.withCredentials)) {\n      request.withCredentials = !!config.withCredentials;\n    }\n\n    // Add responseType to request if needed\n    if (responseType && responseType !== 'json') {\n      request.responseType = config.responseType;\n    }\n\n    // Handle progress if needed\n    if (typeof config.onDownloadProgress === 'function') {\n      request.addEventListener('progress', config.onDownloadProgress);\n    }\n\n    // Not all browsers support upload events\n    if (typeof config.onUploadProgress === 'function' && request.upload) {\n      request.upload.addEventListener('progress', config.onUploadProgress);\n    }\n\n    if (config.cancelToken || config.signal) {\n      // Handle cancellation\n      // eslint-disable-next-line func-names\n      onCanceled = function(cancel) {\n        if (!request) {\n          return;\n        }\n        reject(!cancel || (cancel && cancel.type) ? new Cancel('canceled') : cancel);\n        request.abort();\n        request = null;\n      };\n\n      config.cancelToken && config.cancelToken.subscribe(onCanceled);\n      if (config.signal) {\n        config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);\n      }\n    }\n\n    if (!requestData) {\n      requestData = null;\n    }\n\n    // Send the request\n    request.send(requestData);\n  });\n};\n\n\n//# sourceURL=webpack://client/./node_modules/axios/lib/adapters/xhr.js?")},"./node_modules/axios/lib/axios.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nvar utils = __webpack_require__(/*! ./utils */ "./node_modules/axios/lib/utils.js");\nvar bind = __webpack_require__(/*! ./helpers/bind */ "./node_modules/axios/lib/helpers/bind.js");\nvar Axios = __webpack_require__(/*! ./core/Axios */ "./node_modules/axios/lib/core/Axios.js");\nvar mergeConfig = __webpack_require__(/*! ./core/mergeConfig */ "./node_modules/axios/lib/core/mergeConfig.js");\nvar defaults = __webpack_require__(/*! ./defaults */ "./node_modules/axios/lib/defaults.js");\n\n/**\n * Create an instance of Axios\n *\n * @param {Object} defaultConfig The default config for the instance\n * @return {Axios} A new instance of Axios\n */\nfunction createInstance(defaultConfig) {\n  var context = new Axios(defaultConfig);\n  var instance = bind(Axios.prototype.request, context);\n\n  // Copy axios.prototype to instance\n  utils.extend(instance, Axios.prototype, context);\n\n  // Copy context to instance\n  utils.extend(instance, context);\n\n  // Factory for creating new instances\n  instance.create = function create(instanceConfig) {\n    return createInstance(mergeConfig(defaultConfig, instanceConfig));\n  };\n\n  return instance;\n}\n\n// Create the default instance to be exported\nvar axios = createInstance(defaults);\n\n// Expose Axios class to allow class inheritance\naxios.Axios = Axios;\n\n// Expose Cancel & CancelToken\naxios.Cancel = __webpack_require__(/*! ./cancel/Cancel */ "./node_modules/axios/lib/cancel/Cancel.js");\naxios.CancelToken = __webpack_require__(/*! ./cancel/CancelToken */ "./node_modules/axios/lib/cancel/CancelToken.js");\naxios.isCancel = __webpack_require__(/*! ./cancel/isCancel */ "./node_modules/axios/lib/cancel/isCancel.js");\naxios.VERSION = __webpack_require__(/*! ./env/data */ "./node_modules/axios/lib/env/data.js").version;\n\n// Expose all/spread\naxios.all = function all(promises) {\n  return Promise.all(promises);\n};\naxios.spread = __webpack_require__(/*! ./helpers/spread */ "./node_modules/axios/lib/helpers/spread.js");\n\n// Expose isAxiosError\naxios.isAxiosError = __webpack_require__(/*! ./helpers/isAxiosError */ "./node_modules/axios/lib/helpers/isAxiosError.js");\n\nmodule.exports = axios;\n\n// Allow use of default import syntax in TypeScript\nmodule.exports["default"] = axios;\n\n\n//# sourceURL=webpack://client/./node_modules/axios/lib/axios.js?')},"./node_modules/axios/lib/cancel/Cancel.js":module=>{"use strict";eval("\n\n/**\n * A `Cancel` is an object that is thrown when an operation is canceled.\n *\n * @class\n * @param {string=} message The message.\n */\nfunction Cancel(message) {\n  this.message = message;\n}\n\nCancel.prototype.toString = function toString() {\n  return 'Cancel' + (this.message ? ': ' + this.message : '');\n};\n\nCancel.prototype.__CANCEL__ = true;\n\nmodule.exports = Cancel;\n\n\n//# sourceURL=webpack://client/./node_modules/axios/lib/cancel/Cancel.js?")},"./node_modules/axios/lib/cancel/CancelToken.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar Cancel = __webpack_require__(/*! ./Cancel */ \"./node_modules/axios/lib/cancel/Cancel.js\");\n\n/**\n * A `CancelToken` is an object that can be used to request cancellation of an operation.\n *\n * @class\n * @param {Function} executor The executor function.\n */\nfunction CancelToken(executor) {\n  if (typeof executor !== 'function') {\n    throw new TypeError('executor must be a function.');\n  }\n\n  var resolvePromise;\n\n  this.promise = new Promise(function promiseExecutor(resolve) {\n    resolvePromise = resolve;\n  });\n\n  var token = this;\n\n  // eslint-disable-next-line func-names\n  this.promise.then(function(cancel) {\n    if (!token._listeners) return;\n\n    var i;\n    var l = token._listeners.length;\n\n    for (i = 0; i < l; i++) {\n      token._listeners[i](cancel);\n    }\n    token._listeners = null;\n  });\n\n  // eslint-disable-next-line func-names\n  this.promise.then = function(onfulfilled) {\n    var _resolve;\n    // eslint-disable-next-line func-names\n    var promise = new Promise(function(resolve) {\n      token.subscribe(resolve);\n      _resolve = resolve;\n    }).then(onfulfilled);\n\n    promise.cancel = function reject() {\n      token.unsubscribe(_resolve);\n    };\n\n    return promise;\n  };\n\n  executor(function cancel(message) {\n    if (token.reason) {\n      // Cancellation has already been requested\n      return;\n    }\n\n    token.reason = new Cancel(message);\n    resolvePromise(token.reason);\n  });\n}\n\n/**\n * Throws a `Cancel` if cancellation has been requested.\n */\nCancelToken.prototype.throwIfRequested = function throwIfRequested() {\n  if (this.reason) {\n    throw this.reason;\n  }\n};\n\n/**\n * Subscribe to the cancel signal\n */\n\nCancelToken.prototype.subscribe = function subscribe(listener) {\n  if (this.reason) {\n    listener(this.reason);\n    return;\n  }\n\n  if (this._listeners) {\n    this._listeners.push(listener);\n  } else {\n    this._listeners = [listener];\n  }\n};\n\n/**\n * Unsubscribe from the cancel signal\n */\n\nCancelToken.prototype.unsubscribe = function unsubscribe(listener) {\n  if (!this._listeners) {\n    return;\n  }\n  var index = this._listeners.indexOf(listener);\n  if (index !== -1) {\n    this._listeners.splice(index, 1);\n  }\n};\n\n/**\n * Returns an object that contains a new `CancelToken` and a function that, when called,\n * cancels the `CancelToken`.\n */\nCancelToken.source = function source() {\n  var cancel;\n  var token = new CancelToken(function executor(c) {\n    cancel = c;\n  });\n  return {\n    token: token,\n    cancel: cancel\n  };\n};\n\nmodule.exports = CancelToken;\n\n\n//# sourceURL=webpack://client/./node_modules/axios/lib/cancel/CancelToken.js?")},"./node_modules/axios/lib/cancel/isCancel.js":module=>{"use strict";eval("\n\nmodule.exports = function isCancel(value) {\n  return !!(value && value.__CANCEL__);\n};\n\n\n//# sourceURL=webpack://client/./node_modules/axios/lib/cancel/isCancel.js?")},"./node_modules/axios/lib/core/Axios.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"./node_modules/axios/lib/utils.js\");\nvar buildURL = __webpack_require__(/*! ../helpers/buildURL */ \"./node_modules/axios/lib/helpers/buildURL.js\");\nvar InterceptorManager = __webpack_require__(/*! ./InterceptorManager */ \"./node_modules/axios/lib/core/InterceptorManager.js\");\nvar dispatchRequest = __webpack_require__(/*! ./dispatchRequest */ \"./node_modules/axios/lib/core/dispatchRequest.js\");\nvar mergeConfig = __webpack_require__(/*! ./mergeConfig */ \"./node_modules/axios/lib/core/mergeConfig.js\");\nvar validator = __webpack_require__(/*! ../helpers/validator */ \"./node_modules/axios/lib/helpers/validator.js\");\n\nvar validators = validator.validators;\n/**\n * Create a new instance of Axios\n *\n * @param {Object} instanceConfig The default config for the instance\n */\nfunction Axios(instanceConfig) {\n  this.defaults = instanceConfig;\n  this.interceptors = {\n    request: new InterceptorManager(),\n    response: new InterceptorManager()\n  };\n}\n\n/**\n * Dispatch a request\n *\n * @param {Object} config The config specific for this request (merged with this.defaults)\n */\nAxios.prototype.request = function request(config) {\n  /*eslint no-param-reassign:0*/\n  // Allow for axios('example/url'[, config]) a la fetch API\n  if (typeof config === 'string') {\n    config = arguments[1] || {};\n    config.url = arguments[0];\n  } else {\n    config = config || {};\n  }\n\n  config = mergeConfig(this.defaults, config);\n\n  // Set config.method\n  if (config.method) {\n    config.method = config.method.toLowerCase();\n  } else if (this.defaults.method) {\n    config.method = this.defaults.method.toLowerCase();\n  } else {\n    config.method = 'get';\n  }\n\n  var transitional = config.transitional;\n\n  if (transitional !== undefined) {\n    validator.assertOptions(transitional, {\n      silentJSONParsing: validators.transitional(validators.boolean),\n      forcedJSONParsing: validators.transitional(validators.boolean),\n      clarifyTimeoutError: validators.transitional(validators.boolean)\n    }, false);\n  }\n\n  // filter out skipped interceptors\n  var requestInterceptorChain = [];\n  var synchronousRequestInterceptors = true;\n  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {\n    if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {\n      return;\n    }\n\n    synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;\n\n    requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  var responseInterceptorChain = [];\n  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {\n    responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  var promise;\n\n  if (!synchronousRequestInterceptors) {\n    var chain = [dispatchRequest, undefined];\n\n    Array.prototype.unshift.apply(chain, requestInterceptorChain);\n    chain = chain.concat(responseInterceptorChain);\n\n    promise = Promise.resolve(config);\n    while (chain.length) {\n      promise = promise.then(chain.shift(), chain.shift());\n    }\n\n    return promise;\n  }\n\n\n  var newConfig = config;\n  while (requestInterceptorChain.length) {\n    var onFulfilled = requestInterceptorChain.shift();\n    var onRejected = requestInterceptorChain.shift();\n    try {\n      newConfig = onFulfilled(newConfig);\n    } catch (error) {\n      onRejected(error);\n      break;\n    }\n  }\n\n  try {\n    promise = dispatchRequest(newConfig);\n  } catch (error) {\n    return Promise.reject(error);\n  }\n\n  while (responseInterceptorChain.length) {\n    promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());\n  }\n\n  return promise;\n};\n\nAxios.prototype.getUri = function getUri(config) {\n  config = mergeConfig(this.defaults, config);\n  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\\?/, '');\n};\n\n// Provide aliases for supported request methods\nutils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, config) {\n    return this.request(mergeConfig(config || {}, {\n      method: method,\n      url: url,\n      data: (config || {}).data\n    }));\n  };\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, data, config) {\n    return this.request(mergeConfig(config || {}, {\n      method: method,\n      url: url,\n      data: data\n    }));\n  };\n});\n\nmodule.exports = Axios;\n\n\n//# sourceURL=webpack://client/./node_modules/axios/lib/core/Axios.js?")},"./node_modules/axios/lib/core/InterceptorManager.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nvar utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");\n\nfunction InterceptorManager() {\n  this.handlers = [];\n}\n\n/**\n * Add a new interceptor to the stack\n *\n * @param {Function} fulfilled The function to handle `then` for a `Promise`\n * @param {Function} rejected The function to handle `reject` for a `Promise`\n *\n * @return {Number} An ID used to remove interceptor later\n */\nInterceptorManager.prototype.use = function use(fulfilled, rejected, options) {\n  this.handlers.push({\n    fulfilled: fulfilled,\n    rejected: rejected,\n    synchronous: options ? options.synchronous : false,\n    runWhen: options ? options.runWhen : null\n  });\n  return this.handlers.length - 1;\n};\n\n/**\n * Remove an interceptor from the stack\n *\n * @param {Number} id The ID that was returned by `use`\n */\nInterceptorManager.prototype.eject = function eject(id) {\n  if (this.handlers[id]) {\n    this.handlers[id] = null;\n  }\n};\n\n/**\n * Iterate over all the registered interceptors\n *\n * This method is particularly useful for skipping over any\n * interceptors that may have become `null` calling `eject`.\n *\n * @param {Function} fn The function to call for each interceptor\n */\nInterceptorManager.prototype.forEach = function forEach(fn) {\n  utils.forEach(this.handlers, function forEachHandler(h) {\n    if (h !== null) {\n      fn(h);\n    }\n  });\n};\n\nmodule.exports = InterceptorManager;\n\n\n//# sourceURL=webpack://client/./node_modules/axios/lib/core/InterceptorManager.js?')},"./node_modules/axios/lib/core/buildFullPath.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nvar isAbsoluteURL = __webpack_require__(/*! ../helpers/isAbsoluteURL */ "./node_modules/axios/lib/helpers/isAbsoluteURL.js");\nvar combineURLs = __webpack_require__(/*! ../helpers/combineURLs */ "./node_modules/axios/lib/helpers/combineURLs.js");\n\n/**\n * Creates a new URL by combining the baseURL with the requestedURL,\n * only when the requestedURL is not already an absolute URL.\n * If the requestURL is absolute, this function returns the requestedURL untouched.\n *\n * @param {string} baseURL The base URL\n * @param {string} requestedURL Absolute or relative URL to combine\n * @returns {string} The combined full path\n */\nmodule.exports = function buildFullPath(baseURL, requestedURL) {\n  if (baseURL && !isAbsoluteURL(requestedURL)) {\n    return combineURLs(baseURL, requestedURL);\n  }\n  return requestedURL;\n};\n\n\n//# sourceURL=webpack://client/./node_modules/axios/lib/core/buildFullPath.js?')},"./node_modules/axios/lib/core/createError.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar enhanceError = __webpack_require__(/*! ./enhanceError */ \"./node_modules/axios/lib/core/enhanceError.js\");\n\n/**\n * Create an Error with the specified message, config, error code, request and response.\n *\n * @param {string} message The error message.\n * @param {Object} config The config.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n * @returns {Error} The created error.\n */\nmodule.exports = function createError(message, config, code, request, response) {\n  var error = new Error(message);\n  return enhanceError(error, config, code, request, response);\n};\n\n\n//# sourceURL=webpack://client/./node_modules/axios/lib/core/createError.js?")},"./node_modules/axios/lib/core/dispatchRequest.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"./node_modules/axios/lib/utils.js\");\nvar transformData = __webpack_require__(/*! ./transformData */ \"./node_modules/axios/lib/core/transformData.js\");\nvar isCancel = __webpack_require__(/*! ../cancel/isCancel */ \"./node_modules/axios/lib/cancel/isCancel.js\");\nvar defaults = __webpack_require__(/*! ../defaults */ \"./node_modules/axios/lib/defaults.js\");\nvar Cancel = __webpack_require__(/*! ../cancel/Cancel */ \"./node_modules/axios/lib/cancel/Cancel.js\");\n\n/**\n * Throws a `Cancel` if cancellation has been requested.\n */\nfunction throwIfCancellationRequested(config) {\n  if (config.cancelToken) {\n    config.cancelToken.throwIfRequested();\n  }\n\n  if (config.signal && config.signal.aborted) {\n    throw new Cancel('canceled');\n  }\n}\n\n/**\n * Dispatch a request to the server using the configured adapter.\n *\n * @param {object} config The config that is to be used for the request\n * @returns {Promise} The Promise to be fulfilled\n */\nmodule.exports = function dispatchRequest(config) {\n  throwIfCancellationRequested(config);\n\n  // Ensure headers exist\n  config.headers = config.headers || {};\n\n  // Transform request data\n  config.data = transformData.call(\n    config,\n    config.data,\n    config.headers,\n    config.transformRequest\n  );\n\n  // Flatten headers\n  config.headers = utils.merge(\n    config.headers.common || {},\n    config.headers[config.method] || {},\n    config.headers\n  );\n\n  utils.forEach(\n    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],\n    function cleanHeaderConfig(method) {\n      delete config.headers[method];\n    }\n  );\n\n  var adapter = config.adapter || defaults.adapter;\n\n  return adapter(config).then(function onAdapterResolution(response) {\n    throwIfCancellationRequested(config);\n\n    // Transform response data\n    response.data = transformData.call(\n      config,\n      response.data,\n      response.headers,\n      config.transformResponse\n    );\n\n    return response;\n  }, function onAdapterRejection(reason) {\n    if (!isCancel(reason)) {\n      throwIfCancellationRequested(config);\n\n      // Transform response data\n      if (reason && reason.response) {\n        reason.response.data = transformData.call(\n          config,\n          reason.response.data,\n          reason.response.headers,\n          config.transformResponse\n        );\n      }\n    }\n\n    return Promise.reject(reason);\n  });\n};\n\n\n//# sourceURL=webpack://client/./node_modules/axios/lib/core/dispatchRequest.js?")},"./node_modules/axios/lib/core/enhanceError.js":module=>{"use strict";eval("\n\n/**\n * Update an Error with the specified config, error code, and response.\n *\n * @param {Error} error The error to update.\n * @param {Object} config The config.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n * @returns {Error} The error.\n */\nmodule.exports = function enhanceError(error, config, code, request, response) {\n  error.config = config;\n  if (code) {\n    error.code = code;\n  }\n\n  error.request = request;\n  error.response = response;\n  error.isAxiosError = true;\n\n  error.toJSON = function toJSON() {\n    return {\n      // Standard\n      message: this.message,\n      name: this.name,\n      // Microsoft\n      description: this.description,\n      number: this.number,\n      // Mozilla\n      fileName: this.fileName,\n      lineNumber: this.lineNumber,\n      columnNumber: this.columnNumber,\n      stack: this.stack,\n      // Axios\n      config: this.config,\n      code: this.code,\n      status: this.response && this.response.status ? this.response.status : null\n    };\n  };\n  return error;\n};\n\n\n//# sourceURL=webpack://client/./node_modules/axios/lib/core/enhanceError.js?")},"./node_modules/axios/lib/core/mergeConfig.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar utils = __webpack_require__(/*! ../utils */ \"./node_modules/axios/lib/utils.js\");\n\n/**\n * Config-specific merge-function which creates a new config-object\n * by merging two configuration objects together.\n *\n * @param {Object} config1\n * @param {Object} config2\n * @returns {Object} New object resulting from merging config2 to config1\n */\nmodule.exports = function mergeConfig(config1, config2) {\n  // eslint-disable-next-line no-param-reassign\n  config2 = config2 || {};\n  var config = {};\n\n  function getMergedValue(target, source) {\n    if (utils.isPlainObject(target) && utils.isPlainObject(source)) {\n      return utils.merge(target, source);\n    } else if (utils.isPlainObject(source)) {\n      return utils.merge({}, source);\n    } else if (utils.isArray(source)) {\n      return source.slice();\n    }\n    return source;\n  }\n\n  // eslint-disable-next-line consistent-return\n  function mergeDeepProperties(prop) {\n    if (!utils.isUndefined(config2[prop])) {\n      return getMergedValue(config1[prop], config2[prop]);\n    } else if (!utils.isUndefined(config1[prop])) {\n      return getMergedValue(undefined, config1[prop]);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function valueFromConfig2(prop) {\n    if (!utils.isUndefined(config2[prop])) {\n      return getMergedValue(undefined, config2[prop]);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function defaultToConfig2(prop) {\n    if (!utils.isUndefined(config2[prop])) {\n      return getMergedValue(undefined, config2[prop]);\n    } else if (!utils.isUndefined(config1[prop])) {\n      return getMergedValue(undefined, config1[prop]);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function mergeDirectKeys(prop) {\n    if (prop in config2) {\n      return getMergedValue(config1[prop], config2[prop]);\n    } else if (prop in config1) {\n      return getMergedValue(undefined, config1[prop]);\n    }\n  }\n\n  var mergeMap = {\n    'url': valueFromConfig2,\n    'method': valueFromConfig2,\n    'data': valueFromConfig2,\n    'baseURL': defaultToConfig2,\n    'transformRequest': defaultToConfig2,\n    'transformResponse': defaultToConfig2,\n    'paramsSerializer': defaultToConfig2,\n    'timeout': defaultToConfig2,\n    'timeoutMessage': defaultToConfig2,\n    'withCredentials': defaultToConfig2,\n    'adapter': defaultToConfig2,\n    'responseType': defaultToConfig2,\n    'xsrfCookieName': defaultToConfig2,\n    'xsrfHeaderName': defaultToConfig2,\n    'onUploadProgress': defaultToConfig2,\n    'onDownloadProgress': defaultToConfig2,\n    'decompress': defaultToConfig2,\n    'maxContentLength': defaultToConfig2,\n    'maxBodyLength': defaultToConfig2,\n    'transport': defaultToConfig2,\n    'httpAgent': defaultToConfig2,\n    'httpsAgent': defaultToConfig2,\n    'cancelToken': defaultToConfig2,\n    'socketPath': defaultToConfig2,\n    'responseEncoding': defaultToConfig2,\n    'validateStatus': mergeDirectKeys\n  };\n\n  utils.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {\n    var merge = mergeMap[prop] || mergeDeepProperties;\n    var configValue = merge(prop);\n    (utils.isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);\n  });\n\n  return config;\n};\n\n\n//# sourceURL=webpack://client/./node_modules/axios/lib/core/mergeConfig.js?")},"./node_modules/axios/lib/core/settle.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar createError = __webpack_require__(/*! ./createError */ \"./node_modules/axios/lib/core/createError.js\");\n\n/**\n * Resolve or reject a Promise based on response status.\n *\n * @param {Function} resolve A function that resolves the promise.\n * @param {Function} reject A function that rejects the promise.\n * @param {object} response The response.\n */\nmodule.exports = function settle(resolve, reject, response) {\n  var validateStatus = response.config.validateStatus;\n  if (!response.status || !validateStatus || validateStatus(response.status)) {\n    resolve(response);\n  } else {\n    reject(createError(\n      'Request failed with status code ' + response.status,\n      response.config,\n      null,\n      response.request,\n      response\n    ));\n  }\n};\n\n\n//# sourceURL=webpack://client/./node_modules/axios/lib/core/settle.js?")},"./node_modules/axios/lib/core/transformData.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nvar utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");\nvar defaults = __webpack_require__(/*! ./../defaults */ "./node_modules/axios/lib/defaults.js");\n\n/**\n * Transform the data for a request or a response\n *\n * @param {Object|String} data The data to be transformed\n * @param {Array} headers The headers for the request or response\n * @param {Array|Function} fns A single function or Array of functions\n * @returns {*} The resulting transformed data\n */\nmodule.exports = function transformData(data, headers, fns) {\n  var context = this || defaults;\n  /*eslint no-param-reassign:0*/\n  utils.forEach(fns, function transform(fn) {\n    data = fn.call(context, data, headers);\n  });\n\n  return data;\n};\n\n\n//# sourceURL=webpack://client/./node_modules/axios/lib/core/transformData.js?')},"./node_modules/axios/lib/defaults.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar utils = __webpack_require__(/*! ./utils */ \"./node_modules/axios/lib/utils.js\");\nvar normalizeHeaderName = __webpack_require__(/*! ./helpers/normalizeHeaderName */ \"./node_modules/axios/lib/helpers/normalizeHeaderName.js\");\nvar enhanceError = __webpack_require__(/*! ./core/enhanceError */ \"./node_modules/axios/lib/core/enhanceError.js\");\n\nvar DEFAULT_CONTENT_TYPE = {\n  'Content-Type': 'application/x-www-form-urlencoded'\n};\n\nfunction setContentTypeIfUnset(headers, value) {\n  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {\n    headers['Content-Type'] = value;\n  }\n}\n\nfunction getDefaultAdapter() {\n  var adapter;\n  if (typeof XMLHttpRequest !== 'undefined') {\n    // For browsers use XHR adapter\n    adapter = __webpack_require__(/*! ./adapters/xhr */ \"./node_modules/axios/lib/adapters/xhr.js\");\n  } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {\n    // For node use HTTP adapter\n    adapter = __webpack_require__(/*! ./adapters/http */ \"./node_modules/axios/lib/adapters/xhr.js\");\n  }\n  return adapter;\n}\n\nfunction stringifySafely(rawValue, parser, encoder) {\n  if (utils.isString(rawValue)) {\n    try {\n      (parser || JSON.parse)(rawValue);\n      return utils.trim(rawValue);\n    } catch (e) {\n      if (e.name !== 'SyntaxError') {\n        throw e;\n      }\n    }\n  }\n\n  return (encoder || JSON.stringify)(rawValue);\n}\n\nvar defaults = {\n\n  transitional: {\n    silentJSONParsing: true,\n    forcedJSONParsing: true,\n    clarifyTimeoutError: false\n  },\n\n  adapter: getDefaultAdapter(),\n\n  transformRequest: [function transformRequest(data, headers) {\n    normalizeHeaderName(headers, 'Accept');\n    normalizeHeaderName(headers, 'Content-Type');\n\n    if (utils.isFormData(data) ||\n      utils.isArrayBuffer(data) ||\n      utils.isBuffer(data) ||\n      utils.isStream(data) ||\n      utils.isFile(data) ||\n      utils.isBlob(data)\n    ) {\n      return data;\n    }\n    if (utils.isArrayBufferView(data)) {\n      return data.buffer;\n    }\n    if (utils.isURLSearchParams(data)) {\n      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n      return data.toString();\n    }\n    if (utils.isObject(data) || (headers && headers['Content-Type'] === 'application/json')) {\n      setContentTypeIfUnset(headers, 'application/json');\n      return stringifySafely(data);\n    }\n    return data;\n  }],\n\n  transformResponse: [function transformResponse(data) {\n    var transitional = this.transitional || defaults.transitional;\n    var silentJSONParsing = transitional && transitional.silentJSONParsing;\n    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';\n\n    if (strictJSONParsing || (forcedJSONParsing && utils.isString(data) && data.length)) {\n      try {\n        return JSON.parse(data);\n      } catch (e) {\n        if (strictJSONParsing) {\n          if (e.name === 'SyntaxError') {\n            throw enhanceError(e, this, 'E_JSON_PARSE');\n          }\n          throw e;\n        }\n      }\n    }\n\n    return data;\n  }],\n\n  /**\n   * A timeout in milliseconds to abort a request. If set to 0 (default) a\n   * timeout is not created.\n   */\n  timeout: 0,\n\n  xsrfCookieName: 'XSRF-TOKEN',\n  xsrfHeaderName: 'X-XSRF-TOKEN',\n\n  maxContentLength: -1,\n  maxBodyLength: -1,\n\n  validateStatus: function validateStatus(status) {\n    return status >= 200 && status < 300;\n  },\n\n  headers: {\n    common: {\n      'Accept': 'application/json, text/plain, */*'\n    }\n  }\n};\n\nutils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {\n  defaults.headers[method] = {};\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);\n});\n\nmodule.exports = defaults;\n\n\n//# sourceURL=webpack://client/./node_modules/axios/lib/defaults.js?")},"./node_modules/axios/lib/env/data.js":module=>{eval('module.exports = {\n  "version": "0.22.0"\n};\n\n//# sourceURL=webpack://client/./node_modules/axios/lib/env/data.js?')},"./node_modules/axios/lib/helpers/bind.js":module=>{"use strict";eval("\n\nmodule.exports = function bind(fn, thisArg) {\n  return function wrap() {\n    var args = new Array(arguments.length);\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i];\n    }\n    return fn.apply(thisArg, args);\n  };\n};\n\n\n//# sourceURL=webpack://client/./node_modules/axios/lib/helpers/bind.js?")},"./node_modules/axios/lib/helpers/buildURL.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"./node_modules/axios/lib/utils.js\");\n\nfunction encode(val) {\n  return encodeURIComponent(val).\n    replace(/%3A/gi, ':').\n    replace(/%24/g, '$').\n    replace(/%2C/gi, ',').\n    replace(/%20/g, '+').\n    replace(/%5B/gi, '[').\n    replace(/%5D/gi, ']');\n}\n\n/**\n * Build a URL by appending params to the end\n *\n * @param {string} url The base of the url (e.g., http://www.google.com)\n * @param {object} [params] The params to be appended\n * @returns {string} The formatted url\n */\nmodule.exports = function buildURL(url, params, paramsSerializer) {\n  /*eslint no-param-reassign:0*/\n  if (!params) {\n    return url;\n  }\n\n  var serializedParams;\n  if (paramsSerializer) {\n    serializedParams = paramsSerializer(params);\n  } else if (utils.isURLSearchParams(params)) {\n    serializedParams = params.toString();\n  } else {\n    var parts = [];\n\n    utils.forEach(params, function serialize(val, key) {\n      if (val === null || typeof val === 'undefined') {\n        return;\n      }\n\n      if (utils.isArray(val)) {\n        key = key + '[]';\n      } else {\n        val = [val];\n      }\n\n      utils.forEach(val, function parseValue(v) {\n        if (utils.isDate(v)) {\n          v = v.toISOString();\n        } else if (utils.isObject(v)) {\n          v = JSON.stringify(v);\n        }\n        parts.push(encode(key) + '=' + encode(v));\n      });\n    });\n\n    serializedParams = parts.join('&');\n  }\n\n  if (serializedParams) {\n    var hashmarkIndex = url.indexOf('#');\n    if (hashmarkIndex !== -1) {\n      url = url.slice(0, hashmarkIndex);\n    }\n\n    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;\n  }\n\n  return url;\n};\n\n\n//# sourceURL=webpack://client/./node_modules/axios/lib/helpers/buildURL.js?")},"./node_modules/axios/lib/helpers/combineURLs.js":module=>{"use strict";eval("\n\n/**\n * Creates a new URL by combining the specified URLs\n *\n * @param {string} baseURL The base URL\n * @param {string} relativeURL The relative URL\n * @returns {string} The combined URL\n */\nmodule.exports = function combineURLs(baseURL, relativeURL) {\n  return relativeURL\n    ? baseURL.replace(/\\/+$/, '') + '/' + relativeURL.replace(/^\\/+/, '')\n    : baseURL;\n};\n\n\n//# sourceURL=webpack://client/./node_modules/axios/lib/helpers/combineURLs.js?")},"./node_modules/axios/lib/helpers/cookies.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"./node_modules/axios/lib/utils.js\");\n\nmodule.exports = (\n  utils.isStandardBrowserEnv() ?\n\n  // Standard browser envs support document.cookie\n    (function standardBrowserEnv() {\n      return {\n        write: function write(name, value, expires, path, domain, secure) {\n          var cookie = [];\n          cookie.push(name + '=' + encodeURIComponent(value));\n\n          if (utils.isNumber(expires)) {\n            cookie.push('expires=' + new Date(expires).toGMTString());\n          }\n\n          if (utils.isString(path)) {\n            cookie.push('path=' + path);\n          }\n\n          if (utils.isString(domain)) {\n            cookie.push('domain=' + domain);\n          }\n\n          if (secure === true) {\n            cookie.push('secure');\n          }\n\n          document.cookie = cookie.join('; ');\n        },\n\n        read: function read(name) {\n          var match = document.cookie.match(new RegExp('(^|;\\\\s*)(' + name + ')=([^;]*)'));\n          return (match ? decodeURIComponent(match[3]) : null);\n        },\n\n        remove: function remove(name) {\n          this.write(name, '', Date.now() - 86400000);\n        }\n      };\n    })() :\n\n  // Non standard browser env (web workers, react-native) lack needed support.\n    (function nonStandardBrowserEnv() {\n      return {\n        write: function write() {},\n        read: function read() { return null; },\n        remove: function remove() {}\n      };\n    })()\n);\n\n\n//# sourceURL=webpack://client/./node_modules/axios/lib/helpers/cookies.js?")},"./node_modules/axios/lib/helpers/isAbsoluteURL.js":module=>{"use strict";eval('\n\n/**\n * Determines whether the specified URL is absolute\n *\n * @param {string} url The URL to test\n * @returns {boolean} True if the specified URL is absolute, otherwise false\n */\nmodule.exports = function isAbsoluteURL(url) {\n  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).\n  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed\n  // by any combination of letters, digits, plus, period, or hyphen.\n  return /^([a-z][a-z\\d\\+\\-\\.]*:)?\\/\\//i.test(url);\n};\n\n\n//# sourceURL=webpack://client/./node_modules/axios/lib/helpers/isAbsoluteURL.js?')},"./node_modules/axios/lib/helpers/isAxiosError.js":module=>{"use strict";eval("\n\n/**\n * Determines whether the payload is an error thrown by Axios\n *\n * @param {*} payload The value to test\n * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false\n */\nmodule.exports = function isAxiosError(payload) {\n  return (typeof payload === 'object') && (payload.isAxiosError === true);\n};\n\n\n//# sourceURL=webpack://client/./node_modules/axios/lib/helpers/isAxiosError.js?")},"./node_modules/axios/lib/helpers/isURLSameOrigin.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"./node_modules/axios/lib/utils.js\");\n\nmodule.exports = (\n  utils.isStandardBrowserEnv() ?\n\n  // Standard browser envs have full support of the APIs needed to test\n  // whether the request URL is of the same origin as current location.\n    (function standardBrowserEnv() {\n      var msie = /(msie|trident)/i.test(navigator.userAgent);\n      var urlParsingNode = document.createElement('a');\n      var originURL;\n\n      /**\n    * Parse a URL to discover it's components\n    *\n    * @param {String} url The URL to be parsed\n    * @returns {Object}\n    */\n      function resolveURL(url) {\n        var href = url;\n\n        if (msie) {\n        // IE needs attribute set twice to normalize properties\n          urlParsingNode.setAttribute('href', href);\n          href = urlParsingNode.href;\n        }\n\n        urlParsingNode.setAttribute('href', href);\n\n        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils\n        return {\n          href: urlParsingNode.href,\n          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',\n          host: urlParsingNode.host,\n          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\\?/, '') : '',\n          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',\n          hostname: urlParsingNode.hostname,\n          port: urlParsingNode.port,\n          pathname: (urlParsingNode.pathname.charAt(0) === '/') ?\n            urlParsingNode.pathname :\n            '/' + urlParsingNode.pathname\n        };\n      }\n\n      originURL = resolveURL(window.location.href);\n\n      /**\n    * Determine if a URL shares the same origin as the current location\n    *\n    * @param {String} requestURL The URL to test\n    * @returns {boolean} True if URL shares the same origin, otherwise false\n    */\n      return function isURLSameOrigin(requestURL) {\n        var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;\n        return (parsed.protocol === originURL.protocol &&\n            parsed.host === originURL.host);\n      };\n    })() :\n\n  // Non standard browser envs (web workers, react-native) lack needed support.\n    (function nonStandardBrowserEnv() {\n      return function isURLSameOrigin() {\n        return true;\n      };\n    })()\n);\n\n\n//# sourceURL=webpack://client/./node_modules/axios/lib/helpers/isURLSameOrigin.js?")},"./node_modules/axios/lib/helpers/normalizeHeaderName.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nvar utils = __webpack_require__(/*! ../utils */ "./node_modules/axios/lib/utils.js");\n\nmodule.exports = function normalizeHeaderName(headers, normalizedName) {\n  utils.forEach(headers, function processHeader(value, name) {\n    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {\n      headers[normalizedName] = value;\n      delete headers[name];\n    }\n  });\n};\n\n\n//# sourceURL=webpack://client/./node_modules/axios/lib/helpers/normalizeHeaderName.js?')},"./node_modules/axios/lib/helpers/parseHeaders.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"./node_modules/axios/lib/utils.js\");\n\n// Headers whose duplicates are ignored by node\n// c.f. https://nodejs.org/api/http.html#http_message_headers\nvar ignoreDuplicateOf = [\n  'age', 'authorization', 'content-length', 'content-type', 'etag',\n  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',\n  'last-modified', 'location', 'max-forwards', 'proxy-authorization',\n  'referer', 'retry-after', 'user-agent'\n];\n\n/**\n * Parse headers into an object\n *\n * ```\n * Date: Wed, 27 Aug 2014 08:58:49 GMT\n * Content-Type: application/json\n * Connection: keep-alive\n * Transfer-Encoding: chunked\n * ```\n *\n * @param {String} headers Headers needing to be parsed\n * @returns {Object} Headers parsed into an object\n */\nmodule.exports = function parseHeaders(headers) {\n  var parsed = {};\n  var key;\n  var val;\n  var i;\n\n  if (!headers) { return parsed; }\n\n  utils.forEach(headers.split('\\n'), function parser(line) {\n    i = line.indexOf(':');\n    key = utils.trim(line.substr(0, i)).toLowerCase();\n    val = utils.trim(line.substr(i + 1));\n\n    if (key) {\n      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {\n        return;\n      }\n      if (key === 'set-cookie') {\n        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);\n      } else {\n        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;\n      }\n    }\n  });\n\n  return parsed;\n};\n\n\n//# sourceURL=webpack://client/./node_modules/axios/lib/helpers/parseHeaders.js?")},"./node_modules/axios/lib/helpers/spread.js":module=>{"use strict";eval("\n\n/**\n * Syntactic sugar for invoking a function and expanding an array for arguments.\n *\n * Common use case would be to use `Function.prototype.apply`.\n *\n *  ```js\n *  function f(x, y, z) {}\n *  var args = [1, 2, 3];\n *  f.apply(null, args);\n *  ```\n *\n * With `spread` this example can be re-written.\n *\n *  ```js\n *  spread(function(x, y, z) {})([1, 2, 3]);\n *  ```\n *\n * @param {Function} callback\n * @returns {Function}\n */\nmodule.exports = function spread(callback) {\n  return function wrap(arr) {\n    return callback.apply(null, arr);\n  };\n};\n\n\n//# sourceURL=webpack://client/./node_modules/axios/lib/helpers/spread.js?")},"./node_modules/axios/lib/helpers/validator.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar VERSION = __webpack_require__(/*! ../env/data */ \"./node_modules/axios/lib/env/data.js\").version;\n\nvar validators = {};\n\n// eslint-disable-next-line func-names\n['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach(function(type, i) {\n  validators[type] = function validator(thing) {\n    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;\n  };\n});\n\nvar deprecatedWarnings = {};\n\n/**\n * Transitional option validator\n * @param {function|boolean?} validator - set to false if the transitional option has been removed\n * @param {string?} version - deprecated version / removed since version\n * @param {string?} message - some message with additional info\n * @returns {function}\n */\nvalidators.transitional = function transitional(validator, version, message) {\n  function formatMessage(opt, desc) {\n    return '[Axios v' + VERSION + '] Transitional option \\'' + opt + '\\'' + desc + (message ? '. ' + message : '');\n  }\n\n  // eslint-disable-next-line func-names\n  return function(value, opt, opts) {\n    if (validator === false) {\n      throw new Error(formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')));\n    }\n\n    if (version && !deprecatedWarnings[opt]) {\n      deprecatedWarnings[opt] = true;\n      // eslint-disable-next-line no-console\n      console.warn(\n        formatMessage(\n          opt,\n          ' has been deprecated since v' + version + ' and will be removed in the near future'\n        )\n      );\n    }\n\n    return validator ? validator(value, opt, opts) : true;\n  };\n};\n\n/**\n * Assert object's properties type\n * @param {object} options\n * @param {object} schema\n * @param {boolean?} allowUnknown\n */\n\nfunction assertOptions(options, schema, allowUnknown) {\n  if (typeof options !== 'object') {\n    throw new TypeError('options must be an object');\n  }\n  var keys = Object.keys(options);\n  var i = keys.length;\n  while (i-- > 0) {\n    var opt = keys[i];\n    var validator = schema[opt];\n    if (validator) {\n      var value = options[opt];\n      var result = value === undefined || validator(value, opt, options);\n      if (result !== true) {\n        throw new TypeError('option ' + opt + ' must be ' + result);\n      }\n      continue;\n    }\n    if (allowUnknown !== true) {\n      throw Error('Unknown option ' + opt);\n    }\n  }\n}\n\nmodule.exports = {\n  assertOptions: assertOptions,\n  validators: validators\n};\n\n\n//# sourceURL=webpack://client/./node_modules/axios/lib/helpers/validator.js?")},"./node_modules/axios/lib/utils.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar bind = __webpack_require__(/*! ./helpers/bind */ \"./node_modules/axios/lib/helpers/bind.js\");\n\n// utils is a library of generic helper functions non-specific to axios\n\nvar toString = Object.prototype.toString;\n\n/**\n * Determine if a value is an Array\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Array, otherwise false\n */\nfunction isArray(val) {\n  return toString.call(val) === '[object Array]';\n}\n\n/**\n * Determine if a value is undefined\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if the value is undefined, otherwise false\n */\nfunction isUndefined(val) {\n  return typeof val === 'undefined';\n}\n\n/**\n * Determine if a value is a Buffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Buffer, otherwise false\n */\nfunction isBuffer(val) {\n  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)\n    && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);\n}\n\n/**\n * Determine if a value is an ArrayBuffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an ArrayBuffer, otherwise false\n */\nfunction isArrayBuffer(val) {\n  return toString.call(val) === '[object ArrayBuffer]';\n}\n\n/**\n * Determine if a value is a FormData\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an FormData, otherwise false\n */\nfunction isFormData(val) {\n  return (typeof FormData !== 'undefined') && (val instanceof FormData);\n}\n\n/**\n * Determine if a value is a view on an ArrayBuffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false\n */\nfunction isArrayBufferView(val) {\n  var result;\n  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {\n    result = ArrayBuffer.isView(val);\n  } else {\n    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);\n  }\n  return result;\n}\n\n/**\n * Determine if a value is a String\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a String, otherwise false\n */\nfunction isString(val) {\n  return typeof val === 'string';\n}\n\n/**\n * Determine if a value is a Number\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Number, otherwise false\n */\nfunction isNumber(val) {\n  return typeof val === 'number';\n}\n\n/**\n * Determine if a value is an Object\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Object, otherwise false\n */\nfunction isObject(val) {\n  return val !== null && typeof val === 'object';\n}\n\n/**\n * Determine if a value is a plain Object\n *\n * @param {Object} val The value to test\n * @return {boolean} True if value is a plain Object, otherwise false\n */\nfunction isPlainObject(val) {\n  if (toString.call(val) !== '[object Object]') {\n    return false;\n  }\n\n  var prototype = Object.getPrototypeOf(val);\n  return prototype === null || prototype === Object.prototype;\n}\n\n/**\n * Determine if a value is a Date\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Date, otherwise false\n */\nfunction isDate(val) {\n  return toString.call(val) === '[object Date]';\n}\n\n/**\n * Determine if a value is a File\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a File, otherwise false\n */\nfunction isFile(val) {\n  return toString.call(val) === '[object File]';\n}\n\n/**\n * Determine if a value is a Blob\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Blob, otherwise false\n */\nfunction isBlob(val) {\n  return toString.call(val) === '[object Blob]';\n}\n\n/**\n * Determine if a value is a Function\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Function, otherwise false\n */\nfunction isFunction(val) {\n  return toString.call(val) === '[object Function]';\n}\n\n/**\n * Determine if a value is a Stream\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Stream, otherwise false\n */\nfunction isStream(val) {\n  return isObject(val) && isFunction(val.pipe);\n}\n\n/**\n * Determine if a value is a URLSearchParams object\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a URLSearchParams object, otherwise false\n */\nfunction isURLSearchParams(val) {\n  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;\n}\n\n/**\n * Trim excess whitespace off the beginning and end of a string\n *\n * @param {String} str The String to trim\n * @returns {String} The String freed of excess whitespace\n */\nfunction trim(str) {\n  return str.trim ? str.trim() : str.replace(/^\\s+|\\s+$/g, '');\n}\n\n/**\n * Determine if we're running in a standard browser environment\n *\n * This allows axios to run in a web worker, and react-native.\n * Both environments support XMLHttpRequest, but not fully standard globals.\n *\n * web workers:\n *  typeof window -> undefined\n *  typeof document -> undefined\n *\n * react-native:\n *  navigator.product -> 'ReactNative'\n * nativescript\n *  navigator.product -> 'NativeScript' or 'NS'\n */\nfunction isStandardBrowserEnv() {\n  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||\n                                           navigator.product === 'NativeScript' ||\n                                           navigator.product === 'NS')) {\n    return false;\n  }\n  return (\n    typeof window !== 'undefined' &&\n    typeof document !== 'undefined'\n  );\n}\n\n/**\n * Iterate over an Array or an Object invoking a function for each item.\n *\n * If `obj` is an Array callback will be called passing\n * the value, index, and complete array for each item.\n *\n * If 'obj' is an Object callback will be called passing\n * the value, key, and complete object for each property.\n *\n * @param {Object|Array} obj The object to iterate\n * @param {Function} fn The callback to invoke for each item\n */\nfunction forEach(obj, fn) {\n  // Don't bother if no value provided\n  if (obj === null || typeof obj === 'undefined') {\n    return;\n  }\n\n  // Force an array if not already something iterable\n  if (typeof obj !== 'object') {\n    /*eslint no-param-reassign:0*/\n    obj = [obj];\n  }\n\n  if (isArray(obj)) {\n    // Iterate over array values\n    for (var i = 0, l = obj.length; i < l; i++) {\n      fn.call(null, obj[i], i, obj);\n    }\n  } else {\n    // Iterate over object keys\n    for (var key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        fn.call(null, obj[key], key, obj);\n      }\n    }\n  }\n}\n\n/**\n * Accepts varargs expecting each argument to be an object, then\n * immutably merges the properties of each object and returns result.\n *\n * When multiple objects contain the same key the later object in\n * the arguments list will take precedence.\n *\n * Example:\n *\n * ```js\n * var result = merge({foo: 123}, {foo: 456});\n * console.log(result.foo); // outputs 456\n * ```\n *\n * @param {Object} obj1 Object to merge\n * @returns {Object} Result of all merge properties\n */\nfunction merge(/* obj1, obj2, obj3, ... */) {\n  var result = {};\n  function assignValue(val, key) {\n    if (isPlainObject(result[key]) && isPlainObject(val)) {\n      result[key] = merge(result[key], val);\n    } else if (isPlainObject(val)) {\n      result[key] = merge({}, val);\n    } else if (isArray(val)) {\n      result[key] = val.slice();\n    } else {\n      result[key] = val;\n    }\n  }\n\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    forEach(arguments[i], assignValue);\n  }\n  return result;\n}\n\n/**\n * Extends object a by mutably adding to it the properties of object b.\n *\n * @param {Object} a The object to be extended\n * @param {Object} b The object to copy properties from\n * @param {Object} thisArg The object to bind function to\n * @return {Object} The resulting value of object a\n */\nfunction extend(a, b, thisArg) {\n  forEach(b, function assignValue(val, key) {\n    if (thisArg && typeof val === 'function') {\n      a[key] = bind(val, thisArg);\n    } else {\n      a[key] = val;\n    }\n  });\n  return a;\n}\n\n/**\n * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)\n *\n * @param {string} content with BOM\n * @return {string} content value without BOM\n */\nfunction stripBOM(content) {\n  if (content.charCodeAt(0) === 0xFEFF) {\n    content = content.slice(1);\n  }\n  return content;\n}\n\nmodule.exports = {\n  isArray: isArray,\n  isArrayBuffer: isArrayBuffer,\n  isBuffer: isBuffer,\n  isFormData: isFormData,\n  isArrayBufferView: isArrayBufferView,\n  isString: isString,\n  isNumber: isNumber,\n  isObject: isObject,\n  isPlainObject: isPlainObject,\n  isUndefined: isUndefined,\n  isDate: isDate,\n  isFile: isFile,\n  isBlob: isBlob,\n  isFunction: isFunction,\n  isStream: isStream,\n  isURLSearchParams: isURLSearchParams,\n  isStandardBrowserEnv: isStandardBrowserEnv,\n  forEach: forEach,\n  merge: merge,\n  extend: extend,\n  trim: trim,\n  stripBOM: stripBOM\n};\n\n\n//# sourceURL=webpack://client/./node_modules/axios/lib/utils.js?")},"./index.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nmodule.exports = __webpack_require__(/*! ./src/client */ "./src/client.js");\n\n//# sourceURL=webpack://client/./index.js?')},"./src/client.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nconst axios = __webpack_require__(/*! axios */ "./node_modules/axios/index.js");\n\nclass RESTClient {\n  /**\r\n   * The RESTClient is a singleton class that handles the connection and data exchange from the back-end\r\n   * REST API.\r\n   */\n  constructor(url) {\n    if (RESTClient._instance) {\n      RESTClient._instance.baseURL = url;\n      return RESTClient._instance;\n    }\n\n    RESTClient._instance = this;\n    this.clearCache();\n    this.baseURL = url;\n    this.cacheEnabled = false;\n    this.cacheExpiry = 24;\n    this.headers = {\n      "Accept": "application/json",\n      "Content-Type": "application/json",\n      "Cache-Control": "no-cache"\n    };\n  }\n  /* *******************************************************************\r\n                      USER AND USER AUTHENTICATION METHODS\r\n  *******************************************************************  */\n\n  /**\r\n   * Method to add authorisation token to the headers.\r\n   * @param jwt - the user\'s json web token\r\n   * @return {JSON} - headers with authorisation field added\r\n   */\n\n\n  set_authentication_headers(jwt) {\n    if (jwt) this.headers[\'Authorization\'] = `Bearer ${jwt}`;else delete this.headers[\'Authorization\'];\n  }\n  /**\r\n   * Makes sure the user is logged in to before triggering the query.\r\n   */\n\n\n  is_loggedIn() {\n    if (!this.headers.Authorization) throw Error("Missing JWT. Please login first");\n  }\n  /**\r\n   * Method to log in the user and set the JWT into the headers\r\n   * @param username - name of the user\r\n   * @param password - password of the user\r\n   * @return {Promise} - the response of the server\r\n   */\n\n\n  async login(username, password) {\n    const endpoint = "/users/sign_in";\n    const body = {\n      user: {\n        login: username,\n        password: password\n      }\n    };\n    const request = {\n      method: "post",\n      baseURL: this.baseURL + endpoint,\n      data: body,\n      headers: this.headers\n    };\n    let response = await this.processQuery(request);\n\n    if (!response.data.error) {\n      this.set_authentication_headers(response.data[\'jwt\']);\n    }\n\n    return response.data;\n  }\n  /**\r\n   * Logout the user from the back, expiring the current jwt.\r\n   * @returns {Promise}\r\n   */\n\n\n  async logout() {\n    const request = {\n      method: "delete",\n      baseURL: this.baseURL + "/users/sign_out",\n      headers: this.headers\n    };\n    let response = await this.processQuery(request);\n    this.set_authentication_headers(null);\n    return response.data;\n  }\n  /**\r\n   *  Method to create a new user\r\n   * @param {Object} userAccount - the user account to create\r\n   * @returns {Promise} response - server response\r\n   */\n\n\n  async createAccount(userAccount) {\n    const request = {\n      method: "post",\n      baseURL: this.baseURL + "/users",\n      data: {\n        user: userAccount\n      },\n      headers: this.headers\n    };\n    let response = await this.processQuery(request);\n    return response.data;\n  }\n  /**\r\n   * Validate the account given the corresponding token received in the email\r\n   * @param {String} token - the account token to validate\r\n   * @returns {Promise}\r\n   */\n\n\n  async confirmAccount(token) {\n    const request = {\n      method: "get",\n      baseURL: this.baseURL + "/users/confirmation?confirmation_token=" + token,\n      headers: this.headers\n    };\n    let response = await this.processQuery(request);\n    return response.data;\n  }\n  /**\r\n   * Method to send a reset password link to the given email address\r\n   * @param {String} email to send the link to\r\n   * @returns {Promise}\r\n   */\n\n\n  async requestResetPwd(email) {\n    const request = {\n      method: "post",\n      baseURL: this.baseURL + "/users/password",\n      headers: this.headers,\n      data: {\n        user: {\n          email: email\n        }\n      }\n    };\n    let response = await this.processQuery(request);\n    return response.data;\n  }\n  /**\r\n   * Resend the validation link for a given user\r\n   * @param {Object} user - contains the email of the user.\r\n   * @returns {Promise}\r\n   */\n\n\n  async resendConfirmation(user) {\n    const request = {\n      method: "post",\n      baseURL: this.baseURL + "/users/confirmation",\n      headers: this.headers,\n      data: {\n        user: user\n      }\n    };\n    let response = await this.processQuery(request);\n    return response.data;\n  }\n  /**\r\n   * Reset the password of the given user\r\n   * @param {Object} user - contains the new pwd, repeated pwd and token received in the email.\r\n   * @returns {Promise}\r\n   */\n\n\n  async resetPassword(user) {\n    const request = {\n      method: "put",\n      baseURL: this.baseURL + "/users/password",\n      headers: this.headers,\n      data: {\n        user: user\n      }\n    };\n    let response = await this.processQuery(request);\n    return response.data;\n  }\n  /**\r\n   * Changes the password of the logged in user\r\n   * @param {Object} user - contains the current, new and repeated new password\r\n   * @returns {Promise}\r\n   */\n\n\n  async resetPasswordWithoutToken(user) {\n    const request = {\n      method: "put",\n      baseURL: this.baseURL + "/users/",\n      headers: this.headers,\n      data: {\n        user: user\n      }\n    };\n    let response = await this.processQuery(request, true);\n    return response.data;\n  }\n  /**\r\n   * Verify the given password is strong enough\r\n   * @param {String} password - the password to test\r\n   * @returns {Promise}\r\n   */\n\n\n  async verifyPassword(password) {\n    let headers = JSON.parse(JSON.stringify(this.headers));\n    const request = {\n      method: "post",\n      baseURL: this.baseURL + "/users/check_password",\n      headers: headers,\n      data: {\n        password: password\n      }\n    };\n    let response = await this.processQuery(request);\n    return response.data;\n  }\n  /**\r\n   * Get the current user data\r\n   * @returns {Promise}\r\n   */\n\n\n  async getMyself() {\n    const request = {\n      method: "get",\n      baseURL: this.baseURL + "/users/edit",\n      headers: this.headers\n    };\n    let response = await this.processQuery(request, true);\n    return response.data;\n  }\n  /**\r\n   * Get the current user data\r\n   * @param userID - ID of the user to get the data from\r\n   * @returns {Promise}\r\n   */\n\n\n  async getPublicUser(userID) {\n    const request = {\n      method: "get",\n      baseURL: this.baseURL + `/user_admin/${userID}`,\n      headers: this.headers\n    };\n    let response = await this.processQuery(request, true);\n    return response.data;\n  }\n  /**\r\n   * Get all users list\r\n   * @returns {Promise}\r\n   */\n\n\n  async getUsersList() {\n    const request = {\n      method: "get",\n      baseURL: this.baseURL + "/user_admin/",\n      headers: this.headers\n    };\n    let response = await this.processQuery(request);\n    return response.data;\n  }\n  /**\r\n   * Edit the current logged in user profile\r\n   * @param {Object} newUser - the new values for the logged in user\r\n   * @returns {Promise}\r\n   */\n\n\n  async editMyself(newUser) {\n    const request = {\n      method: "put",\n      baseURL: this.baseURL + "/users",\n      headers: this.headers,\n      data: {\n        user: newUser\n      }\n    };\n    let response = await this.processQuery(request, true);\n    return response.data;\n  }\n  /**\r\n   * Edit the given user profile. Requires Admin rights.\r\n   * @param {Object} newUser - the new values for the user to edit.\r\n   * @returns {Promise}\r\n   */\n\n\n  async editUser(newUser) {\n    const request = {\n      method: "put",\n      baseURL: this.baseURL + `/user_admin/${newUser.id}`,\n      headers: this.headers,\n      data: {\n        user: newUser\n      }\n    };\n    let response = await this.processQuery(request, true);\n    return response.data;\n  }\n  /**\r\n   * Delete the user\r\n   * @param userID - the ID of the user to delete. Requires Admin rights.\r\n   * @returns {Promise}\r\n   */\n\n\n  async deleteUser(userID) {\n    const request = {\n      method: "delete",\n      baseURL: this.baseURL + `/user_admin/${userID}`,\n      headers: this.headers\n    };\n    let response = await this.processQuery(request, true);\n    return response.data;\n  }\n  /**\r\n   * Verify that the given JWT is still valid\r\n   * @returns {Promise}\r\n   */\n\n\n  async validateToken() {\n    const request = {\n      method: "get",\n      baseURL: this.baseURL + "/users/valid",\n      headers: this.headers\n    };\n    let response = await this.processQuery(request, true);\n    if (!response.data.success) this.set_authentication_headers(null);\n    return response.data;\n  }\n  /* *******************************************************************\r\n                              EDITOR METHODS\r\n  *******************************************************************  */\n\n  /**\r\n   * Post the given object to the API to create the corresponding record.\r\n   * @param {Object} record\r\n   * @returns {Promise}\r\n   */\n\n\n  async createRecord(record) {\n    const request = {\n      method: "post",\n      baseURL: this.baseURL + "/fairsharing_records",\n      headers: this.headers,\n      data: {\n        fairsharing_record: record\n      }\n    };\n    let response = await this.processQuery(request, true);\n    return response.data;\n  }\n  /**\r\n   * Update the given record\r\n   * @param {Number} recordID - the record ID to update\r\n   * @param {Object} record - the record new values\r\n   * @returns {Promise}\r\n   */\n\n\n  async updateRecord(recordID, record) {\n    const request = {\n      method: "put",\n      baseURL: this.baseURL + "/fairsharing_records/" + recordID,\n      headers: this.headers,\n      data: {\n        fairsharing_record: record\n      }\n    };\n    let response = await this.processQuery(request, true);\n    return response.data;\n  }\n  /**\r\n   * Determine if a user has permission to edit this record.\r\n   * @param {Number} recordID - ID of the record.\r\n   * @returns {Promise}\r\n   */\n\n\n  async canEdit(recordID) {\n    const request = {\n      method: "get",\n      baseURL: this.baseURL + "/fairsharing_records/can_edit/" + recordID,\n      headers: this.headers\n    };\n    let response = await this.processQuery(request, true);\n    return response.data;\n  }\n  /**\r\n   * Attempt to create a request to become a maintainer/owner of the record. Requires admin validation.\r\n   * @param {Number} recordID - ID for the relevant record.\r\n   * @returns {Promise}\r\n   */\n\n\n  async claimRecord(recordID) {\n    const request = {\n      method: "post",\n      baseURL: this.baseURL + "/maintenance_requests",\n      headers: this.headers,\n      data: {\n        maintenance_request: {\n          fairsharing_record_id: recordID\n        }\n      }\n    };\n    let response = await this.processQuery(request, true);\n    return response.data;\n  }\n  /**\r\n   * Determine if a the logged in user has permission to claim a record.\r\n   * @param {Number} recordID - ID for the relevant FairsharingRecord.\r\n   * @returns {Promise}\r\n   */\n\n\n  async canClaim(recordID) {\n    const request = {\n      method: "get",\n      baseURL: this.baseURL + "/maintenance_requests/existing/" + recordID,\n      headers: this.headers\n    };\n    let response = await this.processQuery(request, true);\n    return response.data;\n  }\n  /**\r\n   * Attempt to create a RecordReview for a user for a FairsharingRecord.\r\n   * @param {Number} recordID - ID for the relevant FairsharingRecord.\r\n   * @returns {Promise}\r\n   */\n\n\n  async reviewRecord(recordID) {\n    const request = {\n      method: "post",\n      baseURL: this.baseURL + "/record_reviews",\n      headers: this.headers,\n      data: {\n        record_review: {\n          fairsharing_record_id: recordID\n        }\n      }\n    };\n    let response = await this.processQuery(request, true);\n    return response.data;\n  }\n  /**\r\n   * Create a new user defined tag in the database for users to tag their records.\r\n   * @param {String} term - the string value of the term\r\n   * @returns {Promise}\r\n   */\n\n\n  async createNewUserDefinedTag(term) {\n    const request = {\n      method: "post",\n      baseURL: this.baseURL + "/user_defined_tags",\n      headers: this.headers,\n      data: {\n        user_defined_tag: {\n          label: term\n        }\n      }\n    };\n    let response = await this.processQuery(request, true);\n    return response.data;\n  }\n  /**\r\n   * TODO: TEST AND WRITE THE INPUT EXAMPLE\r\n   * Create new a licence link between a licence and a record\r\n   * @param {Object} licenceLink - the licence link to create: contains the licence id and the record id.\r\n   * @returns {Promise}\r\n   */\n\n\n  async createLicenceLink(licenceLink) {\n    let _client = this;\n\n    const request = {\n      method: "post",\n      baseURL: _client.baseURL + "/licence_links",\n      headers: this.headers,\n      data: {\n        licence_link: licenceLink\n      }\n    };\n    let response = await _client.processQuery(request, true);\n    return response.data;\n  }\n  /**\r\n   * Delete the given licence\r\n   * @param {Number} licenceLinkID - id of the licence link to delete\r\n   * @returns {Promise}\r\n   */\n\n\n  async deleteLicenceLink(licenceLinkID) {\n    let _client = this;\n\n    const request = {\n      method: "delete",\n      baseURL: _client.baseURL + "/licence_links/" + licenceLinkID,\n      headers: this.headers\n    };\n    let response = await _client.processQuery(request, true);\n    return response.data;\n  }\n  /**\r\n   * Update the licenceLink\r\n   * @param {Object} licenceLink - the new values for the licence link\r\n   * @returns {Promise}\r\n   */\n\n\n  async updateLicenceLink(licenceLink) {\n    let _client = this;\n\n    const request = {\n      method: "put",\n      baseURL: _client.baseURL + "/licence_links/" + licenceLink.id,\n      headers: this.headers,\n      data: {\n        licence_link: licenceLink\n      }\n    };\n    let response = await _client.processQuery(request, true);\n    return response.data;\n  }\n  /**\r\n   * Creates a new publications\r\n   * @param {Object} publication - the publication to create\r\n   * @returns {Promise}\r\n   */\n\n\n  async createPublication(publication) {\n    const request = {\n      method: "post",\n      baseURL: this.baseURL + "/publications",\n      headers: this.headers,\n      data: {\n        publication: publication\n      }\n    };\n    let response = await this.processQuery(request, true);\n    return response.data;\n  }\n  /**\r\n   * Edit the given publication\r\n   * @param {Object} publication - the publication ID and new values\r\n   * @returns {Promise}\r\n   */\n\n\n  async editPublication(publication) {\n    const request = {\n      method: "put",\n      baseURL: this.baseURL + "/publications/" + publication.id,\n      headers: this.headers,\n      data: {\n        publication: publication\n      }\n    };\n    let response = await this.processQuery(request, true);\n    return response.data;\n  }\n  /**\r\n   * Saves the relationships as an array of items containing a targetID, a sourceID and a labelID\r\n   * @param {Number} recordID - the record to add the relationships to.\r\n   * @param {Array<Object>} relations - the relations.\r\n   * @returns {Promise}\r\n   */\n\n\n  async saveRelations(recordID, relations) {\n    const request = {\n      method: \'put\',\n      baseURL: this.baseURL + \'/fairsharing_records/\' + recordID,\n      headers: this.headers,\n      data: {\n        fairsharing_record: {\n          record_associations_attributes: relations\n        }\n      }\n    };\n    let response = await this.processQuery(request, true);\n    return response.data;\n  }\n  /**\r\n   * Create a given organisation\r\n   * @param {Object} organisation\r\n   * @returns {Promise}\r\n   */\n\n\n  async createOrganisation(organisation) {\n    const request = {\n      method: "post",\n      baseURL: this.baseURL + "/organisations",\n      headers: this.headers,\n      data: {\n        organisation: organisation\n      }\n    };\n    let response = await this.processQuery(request, true);\n    return response.data;\n  }\n  /**\r\n   * Create a given grant\r\n   * @param {Object} grant\r\n   * @returns {Promise}\r\n   */\n\n\n  async createGrant(grant) {\n    const request = {\n      method: "post",\n      baseURL: this.baseURL + "/grants",\n      headers: this.headers,\n      data: {\n        grant: grant\n      }\n    };\n    let response = await this.processQuery(request, true);\n    return response.data;\n  }\n  /**\r\n   * Create a new link between an organisation, a record and an optional grant.\r\n   * @param {Object} organisationLink - the organisation link to create\r\n   * @returns {Promise}\r\n   */\n\n\n  async createOrganisationLink(organisationLink) {\n    let _client = this;\n\n    const request = {\n      method: "post",\n      baseURL: _client.baseURL + "/organisation_links",\n      headers: this.headers,\n      data: {\n        organisation_link: organisationLink\n      }\n    };\n    let response = await _client.processQuery(request, true);\n    return response.data;\n  }\n  /**\r\n   * Update the organisationLink given from linkID input with the given organisationLink\r\n   * @param {Object} organisationLink - the new organisation link value\r\n   * @param {Number} linkID - ID of the organisationLink to update\r\n   * @returns {Promise}\r\n   */\n\n\n  async updateOrganisationLink(organisationLink, linkID) {\n    const request = {\n      method: "put",\n      baseURL: this.baseURL + "/organisation_links/" + linkID,\n      headers: this.headers,\n      data: {\n        organisation_link: organisationLink\n      }\n    };\n    let response = await this.processQuery(request, true);\n    return response.data;\n  }\n  /**\r\n   * Delete the given organisation link\r\n   * @param {Number} linkID - the id of the link to remove\r\n   * @returns {Promise}\r\n   */\n\n\n  async deleteOrganisationLink(linkID) {\n    let _client = this;\n\n    const request = {\n      method: "delete",\n      baseURL: _client.baseURL + "/organisation_links/" + linkID,\n      headers: this.headers\n    };\n    let response = await _client.processQuery(request, true);\n    return response.data;\n  }\n  /**\r\n   * Get the extra metadata fields for a RecordType\r\n   * @param {String} type - name of the record type.\r\n   * @returns {Promise}\r\n   */\n\n\n  async extraMetadataFields(type) {\n    const request = {\n      method: "post",\n      baseURL: this.baseURL + "/fairsharing_records/metadata_fields",\n      headers: this.headers,\n      data: {\n        type: type\n      }\n    };\n    let response = await this.processQuery(request, true);\n    return response.data;\n  }\n  /**\r\n   * Get the list of allowed relation types for editing record\'s relationships.\r\n   * @returns {Promise}\r\n   */\n\n\n  async getRelationsTypes() {\n    let _client = this;\n\n    const request = {\n      method: "get",\n      baseURL: _client.baseURL + "/record_associations/allowed"\n    };\n    let response = await _client.processQuery(request);\n    return response.data;\n  }\n  /**\r\n   * Get the list of available profile types for a user.\r\n   * @returns {Promise}\r\n   */\n\n\n  async getProfileTypes() {\n    const request = {\n      method: "get",\n      baseURL: this.baseURL + "/users/profile_types",\n      headers: this.headers\n    };\n    let response = await this.processQuery(request);\n    return response.data;\n  }\n  /* *******************************************************************\r\n                              CURATION METHODS\r\n  *******************************************************************  */\n\n  /**\r\n   * Update the maintenanceRequest given the new status value. Requires admin right.\r\n   * @param {Number} maintenanceRequest  ID of the maintenanceRequest to update\r\n   * @param {string} newStatus - new status to update\r\n   * @returns {Promise}\r\n   */\n\n\n  async updateStatusMaintenanceRequest(maintenanceRequest, newStatus) {\n    const request = {\n      method: "put",\n      baseURL: this.baseURL + "/maintenance_requests/" + maintenanceRequest,\n      headers: this.headers,\n      data: {\n        maintenance_request: {\n          status: newStatus\n        }\n      }\n    };\n    let response = await this.processQuery(request, true);\n    return response.data;\n  }\n  /**\r\n   * Delete Record. Requires Admin right.\r\n   * @param {Number} id - id of the record link to delete\r\n   * @returns {Promise}\r\n   */\n\n\n  async deleteRecord(id) {\n    let _client = this;\n\n    const request = {\n      method: "delete",\n      baseURL: _client.baseURL + "/fairsharing_records/" + id,\n      headers: this.headers\n    };\n    let response = await _client.processQuery(request, true);\n    return response.data;\n  }\n  /**\r\n   * Get records without DOIS\r\n   * @returns {Promise}\r\n   */\n\n\n  async getRecordsWoDOIs() {\n    const request = {\n      method: "get",\n      baseURL: this.baseURL + "/files/no_dois"\n    };\n    let response = await this.processQuery(request, true);\n    return response.data;\n  }\n  /**\r\n   * Get the current record\r\n   * @param {Number} recordID - id of the record to get\r\n   * @returns {Promise}\r\n   */\n\n\n  async getRecord(recordID) {\n    const request = {\n      method: "get",\n      baseURL: `${this.baseURL}/fairsharing_records/${recordID}`,\n      headers: this.headers\n    };\n    let response = await this.processQuery(request, true);\n    return response.data;\n  }\n  /**\r\n   * Validates the tag type against allowed types\r\n   * @param {String} tagType\r\n   */\n\n\n  validate_tag_type(tagType) {\n    const allowed = ["countries", "domains", "subjects", "user_defined_tags", "taxonomies", "publications", "record_types"];\n    if (!allowed.includes(tagType)) throw Error(`tag type should be one of ${allowed.join(", ")}`);\n  }\n  /**\r\n   * Search the countries\r\n   * @param {String} tagType - the type of tag to search for (eg. countries, domains, subjects, ...)\r\n   * @param {String} query - an optional query string\r\n   * @returns {Promise}\r\n   */\n\n\n  async searchTags(tagType, query = null) {\n    this.validate_tag_type(tagType);\n    const body = query ? {\n      q: query\n    } : {};\n    const request = {\n      method: "post",\n      baseURL: `${this.baseURL}/search/${tagType}`,\n      headers: this.headers,\n      data: body\n    };\n    let response = await this.processQuery(request, true);\n    return response.data;\n  }\n  /**\r\n   * Helper to get countries\r\n   * @param {String} query - optional query string\r\n   * @returns {Promise}\r\n   */\n\n\n  async getCountries(query = null) {\n    return await this.searchTags("countries", query);\n  }\n  /**\r\n   * Helper to get domains\r\n   * @param {String} query - optional query string\r\n   * @returns {Promise<*>}\r\n   */\n\n\n  async getDomains(query = null) {\n    return await this.searchTags("domains", query);\n  }\n  /**\r\n   * Helper to get subjects\r\n   * @param {String} query - optional query string\r\n   * @returns {Promise<*>}\r\n   */\n\n\n  async getSubjects(query = null) {\n    return await this.searchTags("subjects", query);\n  }\n  /**\r\n   * Helper to get user defined tags\r\n   * @param {String} query - optional query string\r\n   * @returns {Promise<*>}\r\n   */\n\n\n  async getUserDefinedTags(query = null) {\n    return await this.searchTags("user_defined_tags", query);\n  }\n  /**\r\n   * Helper to get taxonomies terms\r\n   * @param {String} query - optional query string\r\n   * @returns {Promise<*>}\r\n   */\n\n\n  async getTaxonomies(query = null) {\n    return await this.searchTags("taxonomies", query);\n  }\n  /**\r\n   * Helper to get publications\r\n   * @param {String} query - optional query string\r\n   * @returns {Promise<*>}\r\n   */\n\n\n  async getPublications(query) {\n    return await this.searchTags("publications", query);\n  }\n  /**\r\n   * Helper to get recordTypes\r\n   * @returns {Promise<*>}\r\n   */\n\n\n  async getRecordTypes() {\n    return await this.searchTags("record_types");\n  }\n  /**\r\n   * Get the given tag type\r\n   * @param tagType\r\n   * @param tagID\r\n   * @returns {Promise<*>}\r\n   */\n\n\n  async getTag(tagType, tagID) {\n    this.validate_tag_type(tagType);\n    const request = {\n      method: "get",\n      baseURL: `${this.baseURL}/${tagType}/${tagID}`,\n      headers: this.headers\n    };\n    let response = await this.processQuery(request, true);\n    return response.data;\n  }\n  /**\r\n   * Helper to get a country\r\n   * @param {Number} countryID - ID of the country to get\r\n   * @returns {Promise<*>}\r\n   */\n\n\n  async getCountry(countryID) {\n    return await this.getTag("countries", countryID);\n  }\n  /**\r\n   * Helper to get a domain\r\n   * @param {Number} domainID - ID of the domain to get\r\n   * @returns {Promise<*>}\r\n   */\n\n\n  async getDomain(domainID) {\n    return await this.getTag("domains", domainID);\n  }\n  /**\r\n   * Helper to get a subject\r\n   * @param {Number} subjectID - ID of the subject to get\r\n   * @returns {Promise<*>}\r\n   */\n\n\n  async getSubject(subjectID) {\n    return await this.getTag("subjects", subjectID);\n  }\n  /**\r\n   * Helper to get a user defined tag\r\n   * @param {Number} tagID - ID of the user defined tag to get\r\n   * @returns {Promise<*>}\r\n   */\n\n\n  async getUserDefinedTag(tagID) {\n    return await this.getTag("user_defined_tags", tagID);\n  }\n  /**\r\n   * Helper to get a user taxonomy term\r\n   * @param {Number} speciesID - ID of the taxonomy term to get\r\n   * @returns {Promise<*>}\r\n   */\n\n\n  async getSpecies(speciesID) {\n    return await this.getTag("user_defined_tags", speciesID);\n  }\n  /**\r\n   * Helper to get a user taxonomy term\r\n   * @param {Number} taxonID - ID of the taxonomy term to get\r\n   * @returns {Promise<*>}\r\n   */\n\n\n  async getTaxon(taxonID) {\n    return await this.getTag("taxonomies", taxonID);\n  }\n  /**\r\n   * Helper to get a publication\r\n   * @param {Number} pubID - ID of the pbulication to get\r\n   * @returns {Promise<*>}\r\n   */\n\n\n  async getPublication(pubID) {\n    return await this.getTag("user_defined_tags", pubID);\n  }\n  /**\r\n   * Search FAIRsharing records\r\n   * @param {Object} query - optional query string\r\n   * @returns {Promise<*>}\r\n   */\n\n\n  async searchRecords(query = {}) {\n    const body = query.q ? {\n      q: query.q\n    } : {};\n    const baseURL = new URL("/search/fairsharing_records", this.baseURL);\n    if (query.page) baseURL.searchParams.set("page[number]", query.page);\n    if (query.perPage) baseURL.searchParams.set("page[size]", query.perPage);\n    const request = {\n      method: "post",\n      baseURL: baseURL.href,\n      headers: this.headers,\n      data: body\n    };\n    let response = await this.processQuery(request, true);\n    return response.data;\n  }\n  /* *******************************************************************\r\n                          CACHE AND OTHER METHODS\r\n  *******************************************************************  */\n\n  /**\r\n   * Process the query and either get the data from the cache or execute the axios request\r\n   * @param {Object} query - the query to execute\r\n   * @param {Boolean} mustBeLoggedIn - should the user be logged in before attempting to execute the query\r\n   * @returns {Promise}\r\n   */\n\n\n  async processQuery(query, mustBeLoggedIn = false) {\n    if (mustBeLoggedIn) this.is_loggedIn();\n\n    try {\n      const URL = query.baseURL;\n      let response = null;\n\n      if (query.method === "get" && this.cacheEnabled) {\n        response = this.getCachedData(URL);\n      }\n\n      if (!response) {\n        response = await this.executeQuery(query);\n\n        if (query.method === "get" && this.cacheEnabled) {\n          this.setCachedData(URL, response);\n        }\n      }\n\n      return response.data ? response : {\n        data: response\n      };\n    } catch (e) {\n      return {\n        data: {\n          error: e\n        }\n      };\n    }\n  }\n  /**\r\n   * Wrapper for easier axios mocks\r\n   * @param query\r\n   * @returns {Promise}\r\n   */\n\n  /* istanbul ignore next */\n\n\n  async executeQuery(query) {\n    return axios(query);\n  }\n  /**\r\n   * Build the cache using local storage\r\n   */\n\n\n  clearCache() {\n    if (storageAvailable()) {\n      localStorage.setItem("requestsCache", JSON.stringify({}));\n    }\n  }\n  /**\r\n   * Given a query url tries to find it in the cache.\r\n   * @param {String} URL\r\n   * @returns {Object|null}\r\n   */\n\n\n  getCachedData(URL) {\n    let cache = localStorage.getItem("requestsCache");\n    cache = cache ? JSON.parse(cache) :\n    /* istanbul ignore next */\n    {};\n    let data = cache[URL] ? cache[URL] : null;\n\n    if (data && data[\'expiry\'] && this.cacheEnabled) {\n      data = new Date().getTime() > new Date(data[\'expiry\']).getTime() ? null : data;\n    }\n\n    return data && data.data ? data.data : null;\n  }\n  /**\r\n   * Write the current response in the local storage\r\n   * @param {String} url - a URL representing the GET query\r\n   * @param {Object} response - the response object received from the server\r\n   */\n\n\n  setCachedData(url, response) {\n    if (this.cacheEnabled) {\n      let cache = JSON.parse(localStorage.getItem("requestsCache"));\n      let data = {\n        data: response\n      };\n      data.expiry = this.generateExpirationDate();\n      cache[url] = data;\n      localStorage.setItem("requestsCache", JSON.stringify(cache));\n    }\n  }\n  /**\r\n   * Method to enable cached data\r\n   * @param {Number} timer - Time in hours after which the cached data will expire.\r\n   */\n\n\n  enableCache(timer = 24) {\n    if (storageAvailable()) {\n      this.cacheEnabled = true;\n      this.cacheExpiry = timer;\n    } else console.info("The cache relies on localStorage and thus is not supported in this environment.");\n  }\n  /**\r\n   * Method to disable cached data\r\n   */\n\n\n  disableCache() {\n    this.cacheEnabled = false;\n    this.cacheExpiry = 24;\n  }\n  /**\r\n   * Generate an expiration date based on the now + expiration timer\r\n   * @returns {Date}\r\n   */\n\n\n  generateExpirationDate() {\n    return new Date(new Date().getTime() + this.cacheExpiry * 60 * 60 * 1000);\n  }\n\n}\n/**\r\n * Test if there\'s an available localStorage before accessing it.\r\n * @returns {boolean}\r\n */\n\n\nfunction storageAvailable() {\n  try {\n    let storage = window["localStorage"],\n        x = \'__storage_test__\';\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nmodule.exports = function client(url) {\n  return new RESTClient(url);\n};\n\n//# sourceURL=webpack://client/./src/client.js?')}},__webpack_module_cache__={};function __webpack_require__(e){var n=__webpack_module_cache__[e];if(void 0!==n)return n.exports;var r=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e](r,r.exports,__webpack_require__),r.exports}var __webpack_exports__=__webpack_require__("./index.js");return __webpack_exports__})()}));